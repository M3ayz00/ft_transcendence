services:
  auth:
    container_name: auth-service
    build: src/server/auth-service
    image: auth-service
    restart: always
    env_file:
      - .env
    networks:
      - trandenden-net
    ports:
      - "3000:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy

  profile:
    container_name: profile-service
    build: src/server/profile-service
    image: profile-service
    restart: always
    env_file:
      - .env
    networks:
      - trandenden-net
    ports:
      - "3001:3001"
    depends_on:
      rabbitmq:
        condition: service_healthy

  # relationships:
  #   container_name: relationships-service
  #   build: src/server/relationships-service
  #   image: relationships-service
  #   restart: always
  #   env_file:
  #     - .env
  #   networks:
  #     - trandenden-net
  #   ports:
  #     - "3002:3002"
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # notifications:
  #   container_name: notifications-service
  #   build: src/server/notifications-service
  #   image: notifications-service
  #   restart: always
  #   env_file:
  #     - .env
  #   networks:
  #     - trandenden-net
  #   ports:
  #     - "3003:3003"
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy

  # chat:
  #   container_name: chat-service
  #   build: src/server/chat-service
  #   image: chat-service
  #   restart: always
  #   env_file:
  #     - .env
  #   networks:
  #     - trandenden-net
  #   ports:
  #     - "3004:3004"
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  
  redis:
    container_name: redis
    build: src/server/redis
    restart: always
    networks:
      - trandenden-net
    expose:
      - 6379

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    env_file:
      - .env
    networks:
      - trandenden-net
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: docker/Dockerfile.client
    image: frontend
    ports:
      - "8080:3000"
    volumes:
      - .:/app
      - /app/node_modules
    working_dir: /app
    depends_on:
      - auth
      - profile
      # - relationships
      # - notifications
      # - chat
      - redis
      - rabbitmq
    env_file:
      - .env
    networks:
      - trandenden-net
    restart: always
    command: npm run dev

  game:
    container_name: game-service
    build: src/server/game-service
    image: game-service
    restart: always
    env_file:
      - .env
    networks:
      - transcendence
    ports:
      - "5000:5000"

networks:
  trandenden-net:
    name: trandenden-net
    driver: bridge
